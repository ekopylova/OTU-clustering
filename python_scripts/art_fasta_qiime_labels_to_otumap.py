#!/usr/bin/env python
"""
This script takes a FASTA file generated by QIIME's split_libraries_fastq.py
(with original FASTQ reads generated by the ART read simulator) and creates
an OTU map using the sequence IDs storing the read identifier and the parent
reference sequence.
"""

# ----------------------------------------------------------------------------
# Copyright (c) 2015--, Evguenia Kopylova
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
# ----------------------------------------------------------------------------

import sys
import getopt
import hashlib
import re

from skbio.parse.sequences import parse_fasta

def parse_fasta_to_otumap(input_fasta_fp, output_otu_fp):
    """ Parse input FASTA file (having QIIME's label format)
        and output OTU map
    """
    # dict to store OTU ids and corresponding reads
    otu_map = {}

    # parse seq_id and ref_id from FASTA file
    with open(input_fasta_fp, 'U') as fasta_fp:
        for label, seq in parse_fasta(fasta_fp):
            seq_id = re.split(' ', label)[0]
            ref_id = re.split('-| ', label)[1]
            if ref_id in otu_map:
                otu_map[ref_id].append(seq_id)
            else:
                otu_map[ref_id] = [seq_id]            
            
    # write the map to out file
    with open(output_otu_fp, 'w') as otu_map_fp:
        for key, value in otu_map.iteritems():
            otu_map_fp.write(key + '\t')
            for x in value:
                otu_map_fp.write(x + '\t')
            otu_map_fp.write('\n')


def main(argv):

    parse_fasta_to_otumap(input_fasta_fp=sys.argv[1],
                          output_otu_fp=sys.argv[2])

if __name__ == "__main__":
    main(sys.argv[1:])
